const conf = require("../configure/configure");

process.env.NODE_ENV = {
    dev: "development",
    test: "testing",
    prod: "production"
}[process.argv[2] || "dev"];

//将配置信息设为全局变量
global.configure = conf(process.argv[2] || "dev");

//启动服务
const app = require("../app"),
    http = require("http");

/**
 * Create HTTP server.
 */
const server = http.createServer(app.callback()),
    port = configure.port || 3000;
//引用 socket.io
const io = require("socket.io")(server);
require("../socket.io/Socket")(io);

//启动系统服务
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    console.log(`已启动 端口: ${bind}`);

    //mongoDB
    const mongoose = require('mongoose');
    connect()
        .on("error", console.error)
        .on('disconnected', connect)
        .once("open", () => {
            console.log("mongo db 连接成功.");
        });

    function connect(){
        return mongoose.connect(configure.mongoURI, configure.mongoOption).connection;
    }
}
